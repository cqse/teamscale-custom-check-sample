import org.gradle.plugins.ide.eclipse.model.AbstractClasspathEntry
import org.gradle.plugins.ide.eclipse.model.Library
import org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory

plugins {
	id 'java-library'
	id 'eclipse'
}

ext {
	teamscaleVersion = '5.9.0-rc3'
}

test {
	useJUnitPlatform()

	testLogging {
		// It's sometimes useful to see the System.out/err during testing
		showStandardStreams = true
		exceptionFormat = 'full'
	}
}

repositories {
	mavenCentral()

	maven {
		url "https://share.cqse.eu/svn/artifacts/maven"
	}
}

dependencies {
	implementation platform("com.teamscale:teamscale-bom:$teamscaleVersion")

	implementation 'com.teamscale:teamscale-check-api'
	implementation 'com.teamscale:teamscale-commons'
	implementation 'com.teamscale:teamscale-lib-commons'
	compile 'org.apache.logging.log4j:log4j-api:2.12.1'

	testImplementation 'com.teamscale:teamscale-check-api-test-fixtures'
}

eclipse {
	classpath {
		file.whenMerged {
			entries = entries.collect {
				if (it in AbstractClasspathEntry && it.kind == 'src' && file(it.path).name == 'resources') {
					// Workaround to make Eclipse accept Java files in resource directories
					Library library = new Library(new FileReferenceFactory().fromPath(it.path))
					if (file(it.path).parentFile.name == 'test') {
						library.entryAttributes['test'] = true
					}
					return library
				}
				return it
			}
		}
	}
}

